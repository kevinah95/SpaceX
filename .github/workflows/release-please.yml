on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

name: release-please

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          RELEASE_PLEASE_PAT: op://Development/RELEASE_PLEASE_PAT/token
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ steps.op-load-secret.outputs.RELEASE_PLEASE_PAT }}
          config-file: .github/release-please/release-please-config.json
          manifest-file: .github/release-please/.release-please-manifest.json
      - name: Create google-services.json
        if: ${{ steps.release.outputs.release_created }}
        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > ./composeApp/google-services.json
      - name: Decode and setup keystore
        if: ${{ steps.release.outputs.release_created }}
        # Generate it locally: `base64 -i ~/.keystores/spacex-release-keystore.jks`
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > ${{ github.workspace }}/spacex-release-keystore.jks
      - name: Set up JDK
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Set up Gradle
        if: ${{ steps.release.outputs.release_created }}
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: '8.14.3'
      - name: Build Android App
        if: ${{ steps.release.outputs.release_created }}
        env:
          RELEASE_KEYSTORE_FILE: ${{ github.workspace }}/spacex-release-keystore.jks
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        run: gradle :composeApp:assembleProdRelease
      - name: Upload Release Artifact
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ steps.release.outputs.tag_name }} ./composeApp/build/outputs/apk/prod/release/composeApp-prod-release.apk
      - name: Convert release notes to plain text
        if: ${{ steps.release.outputs.release_created }}
        run: echo '${{ steps.release.outputs.body }}' > release-notes.md
        
      - name: Convert Markdown to plain text with Pandoc
        if: ${{ steps.release.outputs.release_created }}
        uses: docker://pandoc/core:3.8
        with:
          args: "-f gfm -t plain --wrap=none release-notes.md -o release-notes.txt"
      - name: Install Firebase CLI (standalone)
        if: ${{ steps.release.outputs.release_created }}
        run: curl -sL https://firebase.tools | bash

      - name: Write Firebase service account
        if: ${{ steps.release.outputs.release_created }}
        run: echo '${{ secrets.FIREBASE_CREDENTIAL_FILE_CONTENT }}' > "$RUNNER_TEMP/firebase-sa.json"

      - name: Distribute to Firebase App Distribution (CLI)
        if: ${{ steps.release.outputs.release_created }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/firebase-sa.json
        run: |
          firebase appdistribution:distribute ./composeApp/build/outputs/apk/prod/release/composeApp-prod-release.apk \
            --app "${{ secrets.FIREBASE_APP_ID }}" \
            --testers "kevinah95@gmail.com" \
            --release-notes-file release-notes.txt
